[{"body":"To start the VPN, simply run edgevpn without any argument.\nAn example of running edgevpn on multiple hosts:\n# on Node A $ EDGEVPNTOKEN=.. edgevpn --address 10.1.0.11/24 # on Node B $ EDGEVPNTOKEN=.. edgevpn --address 10.1.0.12/24 # on Node C ... $ EDGEVPNTOKEN=.. edgevpn --address 10.1.0.13/24 ... … and that’s it! the --address is a virtual unique IP for each node, and it is actually the ip where the node will be reachable to from the vpn. You can assign IPs freely to the nodes of the network, while you can override the default edgevpn0 interface with IFACE (or --interface)\nNote: It might take up time to build the connection between nodes. Wait at least 5 mins, it depends on the network behind the hosts.\nThe VPN takes several options, below you will find a reference for the most important features:\nGenerate a network token EdgeVPN works by generating tokens (or network configuration files) that are shared between different machines.\nEvery token is unique and identifies the network itself: there is no central server setup, and no IP address is specified in config files.\nTo generate a new network token, just run edgevpn -g -b:\n$ edgevpn -g -b b3RwOgogIGRodDoKICAgIGludGVydmFsOiA5MDAwCiAgICBrZXk6IDRPNk5aUUMyTzVRNzdKRlJJT1BCWDVWRUkzRUlKSFdECiAgICBsZW5ndGg6IDMyCiAgY3J5cHRvOgogICAgaW50ZXJ2YWw6IDkwMDAKICAgIGtleTogN1hTUUNZN0NaT0haVkxQR0VWTVFRTFZTWE5ORzNOUUgKICAgIGxlbmd0aDogMzIKcm9vbTogWUhmWXlkSUpJRlBieGZDbklLVlNmcGxFa3BhVFFzUk0KcmVuZGV6dm91czoga1hxc2VEcnNqbmFEbFJsclJCU2R0UHZGV0RPZGpXd0cKbWRuczogZ0NzelJqZk5XZEFPdHhubm1mZ3RlSWx6Zk1BRHRiZGEKbWF4X21lc3NhZ2Vfc2l6ZTogMjA5NzE1MjAK A network token needs to be specified for all later interactions with edgevpn, in order to connect and establish a network connection between peers.\nFor example, to start edgevpn in API mode:\n$ edgevpn api --token \u003ctoken\u003e # or alternatively using $EDGEVPNTOKEN INFO edgevpn Copyright (C) 2021-2022 Ettore Di Giacinto This program comes with ABSOLUTELY NO WARRANTY. This is free software, and you are welcome to redistribute it under certain conditions. INFO Version: v0.8.4 commit: INFO Starting EdgeVPN network INFO Node ID: 12D3KooWRW4RXSMAh7CTRsTjX7iEjU6DEU8QKJZvFjSosv7zCCeZ INFO Node Addresses: [/ip6/::1/tcp/38637 /ip4/192.168.1.234/tcp/41607 /ip4/127.0.0.1/tcp/41607] INFO Bootstrapping DHT ⇨ http server started on [::]:8080 Alternatively a network configuration file can be specified with --config or EDGEVPNCONFIG.\nAs the token is a network configuration file encoded in base64, using a token or a config is equivalent:\n$ EDGEVPNTOKEN=$(edgevpn -g | tee config.yaml | base64 -w0) API While starting in VPN mode, it is possible also to start in API mode by specifying --api.\nDHCP Note: Experimental feature!\nAutomatic IP negotiation is available since version 0.8.1.\nDHCP can be enabled with --dhcp and --address can be omitted. If an IP is specfied with --address it will be the default IP.\nIPv6 (experimental) Node: Very experimental feature! Highly unstable!\nVery provisional support for IPv6 is available using static addresses only. Currently only one address is supported per interface, dual stack is not available. For more information, checkout issue #15\nIPv6 can be enabled with --address fd:ed4e::\u003cIP\u003e/64 and --mtu \u003e1280.\n","categories":"","description":"Command line interface\n","excerpt":"Command line interface\n","ref":"/edgevpn/docs/getting-started/cli/","tags":"","title":"CLI"},{"body":"Get EdgeVPN Prerequisites: No dependencies. EdgeVPN releases are statically compiled.\nFrom release Just grab a release from the release page on GitHub. The binaries are statically compiled.\nVia Homebrew on Macos If you’re using homebrew in MacOS, you can use the edgevpn formula\nbrew install edgevpn Building EdgeVPN from source Requirements:\n Golang installed in your system. make  $\u003e git clone https://github.com/mudler/edgevpn $\u003e cd edgevpn $\u003e go build First VPN Let’s create our first vpn now and start it:\n$\u003e EDGEVPNTOKEN=$(edgevpn -b -g) $\u003e edgevpn --dhcp --api That’s it!\nYou can now access the web interface on http://localhost:8080.\nTo join new nodes in the network, simply copy the EDGEVPNTOKEN and use it to start edgevpn in other nodes:\n$\u003e EDGEVPNTOKEN=\u003ctoken_generated_before\u003e edgevpn --dhcp ","categories":"","description":"First steps with EdgeVPN\n","excerpt":"First steps with EdgeVPN\n","ref":"/edgevpn/docs/getting-started/","tags":"","title":"Getting Started"},{"body":"A Desktop GUI application (alpha) for Linux is available here.\nNote the GUI doesn’t require the CLI to be installed. It will automatically prompt to download the latest available version, and offer a version management option.\n   Dashboard Connections index              ","categories":"","description":"GUI app\n","excerpt":"GUI app\n","ref":"/edgevpn/docs/getting-started/gui/","tags":"","title":"GUI"},{"body":"EdgeVPN have a simplified model of a blockchain embedded. The model is actually simplified on purpose as the blockchain is used to store merely network and services metadata and not transaction, or content addressable network.\nThe only data stored in the blockchain is:\n Network Peer IDs, Service IDs, File IDs Healthchecks, DNS records and IP allocation  However, the ledger is freely accessible via API, allowing for external coordination to use the blockchain mechanism as a shared memory access (which can be optionally persisted on disk).\n","categories":"","description":"EdgeVPN overview\n","excerpt":"EdgeVPN overview\n","ref":"/edgevpn/docs/concepts/overview/","tags":"","title":"Overview"},{"body":"Forwarding a local connection EdgeVPN can also be used to expose local(or remote) services without establishing a VPN and allocating a local tun/tap device, similarly to ngrok.\nExposing a service If you are used to how Local SSH forwarding works (e.g. ssh -L 9090:something:remote \u003cmy_node\u003e), EdgeVPN takes a similar approach.\nA Service is a generalized TCP service running in a host (also outside the network). For example, let’s say that we want to expose a SSH server inside a LAN.\nTo expose a service to your EdgeVPN network then:\n$ edgevpn service-add \"MyCoolService\" \"127.0.0.1:22\" To reach the service, EdgeVPN will setup a local port and bind to it, it will tunnel the traffic to the service over the VPN, for e.g. to bind locally to 9090:\n$ edgevpn service-connect \"MyCoolService\" \"127.0.0.1:9090\" with the example above, ‘sshing into 9090 locally would forward to 22.\n","categories":"","description":"EdgeVPN network services for tunnelling TCP services\n","excerpt":"EdgeVPN network services for tunnelling TCP services\n","ref":"/edgevpn/docs/concepts/overview/services/","tags":"","title":"Tunnel connections"},{"body":"The API has a simple webUI embedded to display network informations.\nTo access the web interface, run in the console:\n$ edgevpn api with either a EDGEVPNCONFIG or EDGEVPNTOKEN.\n   Dashboard (Dark mode) Dashboard (Light mode)             DNS Machine index             Services Blockchain index          In API mode, EdgeVPN will connect to the network without routing any packet, and without setting up a VPN interface.\nBy default edgevpn will listen on the 8080 port. See edgevpn api --help for the available options\nAPI can also be started together with the vpn with --api.\nAPI endpoints GET /api/users Returns the users connected to services in the blockchain\n/api/services Returns the services running in the blockchain\n/api/dns Returns the domains registered in the blockchain\n/api/machines Returns the machines connected to the VPN\n/api/blockchain Returns the latest available blockchain\n/api/ledger Returns the current data in the ledger\n/api/ledger/:bucket Returns the current data in the ledger inside the :bucket\n/api/ledger/:bucket/:key Returns the current data in the ledger inside the :bucket at given :key\n/api/peergate Returns peergater status\nPUT /api/ledger/:bucket/:key/:value Puts :value in the ledger inside the :bucket at given :key\n/api/peergate/:state Enables/disables peergating:\n# enable $ curl -X PUT 'http://localhost:8080/api/peergate/enable' # disable $ curl -X PUT 'http://localhost:8080/api/peergate/disable' POST /api/dns The endpoint accept a JSON payload of the following form:\n{ \"Regex\": \"\u003cregex\u003e\", \"Records\": { \"A\": \"2.2.2.2\", \"AAAA\": \"...\", }, } Takes a regex and a set of records and registers them to the blockchain.\nThe DNS table in the ledger will be used by the embedded DNS server to handle requests locally.\nTo create a new entry, for example:\n$ curl -X POST http://localhost:8080/api/dns --header \"Content-Type: application/json\" -d '{ \"Regex\": \"foo.bar\", \"Records\": { \"A\": \"2.2.2.2\" } }' DELETE /api/ledger/:bucket/:key Deletes the :key into :bucket inside the ledger\n/api/ledger/:bucket Deletes the :bucket from the ledger\nBinding to a socket The API can also be bound to a socket, for instance:\n$ edgevpn api --listen \"unix://\u003cpath/to/socket\u003e\" or as well while running the vpn:\n$ edgevpn api --api-listen \"unix://\u003cpath/to/socket\u003e\" ","categories":"","description":"Query the network status and operate the ledger with the built-in API\n","excerpt":"Query the network status and operate the ledger with the built-in API\n","ref":"/edgevpn/docs/getting-started/api/","tags":"","title":"WebUI and API"},{"body":"Introduction EdgeVPN uses libp2p to establish a decentralized, asymmetrically encrypted gossip network which propagate a (symmetrically encrypted) blockchain states between nodes.\nThe blockchain is lightweight as:\n There is no PoW mechanism It is in memory only, no DAG, CARv2, or GraphSync protocol - the usage is restricted to hold metadata, and not real addressable content  EdgeVPN uses the blockchain to store Services UUID, Files UUID, VPN and other metadata (such as DNS records, IP, etc.) and co-ordinate events between the nodes of the network. Besides, it is used as a mechanism of protection: if nodes are not part of the blockchain, they can’t talk to each other.\nThe blockchain is ephemeral and on-memory, optionally can be stored on disk.\nEach node keeps broadcasting it’s state until it is reconciled in the blockchain. If the blockchain would get start from scratch, the hosts would re-announce and try to fill the blockchain with their data.\n Simple (KISS) interface to display network data from the blockchain asymmetric p2p encryption between peers with libp2p randezvous points dynamically generated from OTP keys extra AES symmetric encryption on top. In case randezvous point is compromised blockchain is used as a sealed encrypted store for the routing table connections are created host to host and encrypted asymmetrically  Connection bootstrap Network is bootstrapped with libp2p and is composed of 3 phases:\n  In the first phase, nodes do discover each others via DHT and a randevouz secret which is automatically generated via OTP.\nOnce peers know about each other a gossip network is established, where the nodes exchange a blockchain over an p2p e2e encrypted channel. The blockchain is sealed with a symmetric key which is rotated via OTP that is shared between the nodes.\nAt that point a blockchain and an API is established between the nodes, and optionally start the VPN binding on the tun/tap device.\n","categories":"","description":"EdgeVPN internal architecture\n","excerpt":"EdgeVPN internal architecture\n","ref":"/edgevpn/docs/concepts/architecture/","tags":"","title":"Architecture"},{"body":"A network token represent the network which edgevpn attempts to establish a connection among peers.\nA token is created by encoding in base64 a network configuration.\nGenerating tokens To generate a network token, run in the console:\nedgevpn -b -g This will print out in screen a base64 token which is ready to be shared on nodes that you wish to join on the same network.\nGenerating configuration files EdgeVPN can read both tokens and network configuration files.\nTo generate a configuration file, run in the console:\nedgevpn -g To turn out a config to a token, you must encode in base64:\nTOKEN=$(edgevpn -g | base64 -w0) which is equivalent to run edgevpn -g -b.\nAnatomy of a configuration file A typical configuration file looks like the following:\notp:dht:interval:9000key:LHKNKT6YZYQGGY3JANGXMLJTHRH7SW3Clength:32crypto:interval:9000key:SGIB6NYJMSRJF2AJDGUI2NDB5LBVCPLSlength:32room:ubONSBFkdWbzkSBTglFzOhWvczTBQJORrendezvous:exoHOajMYMSPrHhevAEEjnCHLssFfzfTmdns:VoZfePlTchbSrdmivaqaOyQyEnTMlugimax_message_size:20971520The values can be all tweaked to your needs.\nEdgeVPN uses an otp mechanism to decrypt blockchain messages between the nodes and to discover nodes from DHT, this is in order to prevent bruteforce attacks and avoid bad actors listening on the protocol. See the Architecture section for more information.\n The OTP keys (otp.crypto.key) rotates the cipher key used to encode/decode the blockchain messages. The interval of rotation can be set for both DHT and the Blockchain messages. The length is the cipher key length (AES-256 by default) used by the sealer to decrypt/encrypt messages. The DHT OTP keys (otp.dht.key) rotates the discovery key used during DHT node discovery. A key is generated and used with OTP at defined intervals to scramble potential listeners. The room is a unique ID which all the nodes will subscribe to. It is automatically generated Optionally the OTP mechanism can be disabled by commenting the otp block. In this case the static DHT rendezvous will be rendezvous The mdns discovery doesn’t have any OTP rotation, so a unique identifier must be provided. Here can be defined the max message size accepted for the blockchain messages with max_message_size (in bytes)  ","categories":"","description":"The edgevpn network token\n","excerpt":"The edgevpn network token\n","ref":"/edgevpn/docs/concepts/token/","tags":"","title":"Token"},{"body":" Experimental feature!\n DNS Server A DNS Server is available but disabled by default.\nThe DNS server will resolve DNS queries using the blockchain as a record and will forward unknown domains by default.\nIt can be enabled by specifying a listening address with --dns. For example, to bind to default 53 port locally, run in the console:\nedgevpn --dns \"127.0.0.1:53\" To turn off dns forwarding, specify --dns-forwarder=false. Optionally a list of DNS servers can be specified multiple times with --dns-forward-server.\nThe dns subcommand has several options:\n --dns value DNS listening address. Empty to disable dns server [$DNSADDRESS] --dns-forwarder Enables dns forwarding [$DNSFORWARD] --dns-cache-size value DNS LRU cache size (default: 200) [$DNSCACHESIZE] --dns-forward-server value List of DNS forward server (default: \"8.8.8.8:53\", \"1.1.1.1:53\") [$DNSFORWARDSERVER] Nodes of the VPN can start a local DNS server which will resolve the routes stored in the chain.\nFor example, to add DNS records, use the API as such:\n$ curl -X POST http://localhost:8080/api/dns --header \"Content-Type: application/json\" -d '{ \"Regex\": \"foo.bar\", \"Records\": { \"A\": \"2.2.2.2\" } }' The /api/dns routes accepts POST requests as JSON of the following form:\n{ \"Regex\": \"\u003cregex\u003e\", \"Records\": { \"A\": \"2.2.2.2\", \"AAAA\": \"...\", }, } Note, Regex accepts regexes which will match the DNS requests received and resolved to the specified entries.\n","categories":"","description":"Embedded DNS server documentation\n","excerpt":"Embedded DNS server documentation\n","ref":"/edgevpn/docs/concepts/overview/dns/","tags":"","title":"DNS"},{"body":"Sending and receiving files EdgeVPN can be used to send and receive files between hosts via p2p with the file-send and file-receive subcommand.\nSending and receiving files, as services, don’t establish a VPN connection.\nSending $ edgevpn file-send 'unique-id' '/src/path' Receiving $ edgevpn file-receive 'unique-id' '/dst/path' ","categories":"","description":"Send and receive files between p2p nodes\n","excerpt":"Send and receive files between p2p nodes\n","ref":"/edgevpn/docs/concepts/overview/files/","tags":"","title":"Sending and receiving files"},{"body":"","categories":"","description":"Expore EdgeVPN functionalities by looking at practical use-cases\n","excerpt":"Expore EdgeVPN functionalities by looking at practical use-cases\n","ref":"/edgevpn/docs/concepts/","tags":"","title":"Concepts"},{"body":"EdgeVPN uses libp2p to build private decentralized networks that can be accessed via shared secrets.\nIt can:\n  Create a VPN :\n Secure VPN between p2p peers Automatically assign IPs to nodes Embedded tiny DNS server to resolve internal/external IPs    Act as a reverse Proxy\n Share a tcp service like you would do with ngrok to the p2p network nodes without establishing a VPN connection    Send files via p2p\n Send files over p2p between nodes without establishing a VPN connection.    Be used as a library\n Plug a distributed p2p ledger easily in your golang code!    Check out the docs below for further example and reference, have a look at our getting started guide, the cli interface, gui desktop app, and the embedded WebUI/API.\n   WebUI Desktop          ","categories":"","description":"","excerpt":"EdgeVPN uses libp2p to build private decentralized networks that can …","ref":"/edgevpn/docs/","tags":"","title":"Documentation"},{"body":" Experimental feature!\n Peerguardian PeerGuardian is a mechanism to prevent unauthorized access to the network if tokens are leaked or either revoke network access.\nIn order to enable it, start edgevpn nodes adding the --peerguradian flag.\nedgevpn --peerguardian To turn on peer gating, specify also --peergate.\nPeerguardian and peergating has several options:\n --peerguard Enable peerguard. (Experimental) [$PEERGUARD] --peergate Enable peergating. (Experimental) [$PEERGATE] --peergate-autoclean Enable peergating autoclean. (Experimental) [$PEERGATE_AUTOCLEAN] --peergate-relaxed Enable peergating relaxation. (Experimental) [$PEERGATE_RELAXED] --peergate-auth value Peergate auth [$PEERGATE_AUTH] --peergate-interval value Peergater interval time (default: 120) [$EDGEVPNPEERGATEINTERVAL] When the PeerGuardian and Peergater are enabled, a VPN node will only accepts blocks from authorized nodes.\nPeerguardian is extensible to support different mechanisms of authentication, we will see below specific implementations.\nECDSA auth The ECDSA authentication mechanism is used to verify peers in the blockchain using ECDSA keys.\nTo generate a new ECDSA keypair use edgevpn peergater ecdsa-genkey:\n$ edgevpn peergater ecdsa-genkey Private key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JSGNBZ0VCQkVJQkhUZnRSTVZSRmlvaWZrdllhZEE2NXVRQXlSZTJSZHM0MW1UTGZlNlRIT3FBTTdkZW9sak0KZXVPbTk2V0hacEpzNlJiVU1tL3BCWnZZcElSZ0UwZDJjdUdnQndZRks0RUVBQ09oZ1lrRGdZWUFCQUdVWStMNQptUzcvVWVoSjg0b3JieGo3ZmZUMHBYZ09MSzNZWEZLMWVrSTlEWnR6YnZWOUdwMHl6OTB3aVZxajdpMDFVRnhVCnRKbU1lWURIRzBTQkNuVWpDZ0FGT3ByUURpTXBFR2xYTmZ4LzIvdEVySDIzZDNwSytraFdJbUIza01QL2tRNEIKZzJmYnk2cXJpY1dHd3B4TXBXNWxKZVZXUGlkeWJmMSs0cVhPTWdQbmRnPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo= Public key: LS0tLS1CRUdJTiBFQyBQVUJMSUMgS0VZLS0tLS0KTUlHYk1CQUdCeXFHU000OUFnRUdCU3VCQkFBakE0R0dBQVFCbEdQaStaa3UvMUhvU2ZPS0syOFkrMzMwOUtWNApEaXl0MkZ4U3RYcENQUTJiYzI3MWZScWRNcy9kTUlsYW8rNHROVkJjVkxTWmpIbUF4eHRFZ1FwMUl3b0FCVHFhCjBBNGpLUkJwVnpYOGY5djdSS3g5dDNkNlN2cElWaUpnZDVERC81RU9BWU5uMjh1cXE0bkZoc0tjVEtWdVpTWGwKVmo0bmNtMzlmdUtsempJRDUzWT0KLS0tLS1FTkQgRUMgUFVCTElDIEtFWS0tLS0tCg== For example, to add a ECDSA public key, use the API as such from a node which is already trusted by PeerGuardian:\n$ curl -X PUT 'http://localhost:8080/api/ledger/trustzoneAuth/ecdsa_1/LS0tLS1CRUdJTiBFQyBQVUJMSUMgS0VZLS0tLS0KTUlHYk1CQUdCeXFHU000OUFnRUdCU3VCQkFBakE0R0dBQVFBL09TTjhsUU9Wa3FHOHNHbGJiellWamZkdVVvUAplMEpsWUVzOFAyU3o1TDlzVUtDYi9kQWkrVFVONXU0ZVk2REpGeU50dWZjK2p0THNVTTlPb0xXVnBXb0E0eEVDCk9VdDFmRVNaRzUxckc4MEdFVjBuQTlBRGFvOW1XK3p4dmkvQnd0ZFVvSTNjTDB0VTdlUGEvSGM4Z1FLMmVOdE0KeDdBSmNYcWpPNXZXWGxZZ2NkOD0KLS0tLS1FTkQgRUMgUFVCTElDIEtFWS0tLS0tCg==' Now the private key can be used while starting new nodes:\nPEERGATE_AUTH=\"{ 'ecdsa' : { 'private_key': 'LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JSGNBZ0VCQkVJQkhUZnRSTVZSRmlvaWZrdllhZEE2NXVRQXlSZTJSZHM0MW1UTGZlNlRIT3FBTTdkZW9sak0KZXVPbTk2V0hacEpzNlJiVU1tL3BCWnZZcElSZ0UwZDJjdUdnQndZRks0RUVBQ09oZ1lrRGdZWUFCQUdVWStMNQptUzcvVWVoSjg0b3JieGo3ZmZUMHBYZ09MSzNZWEZLMWVrSTlEWnR6YnZWOUdwMHl6OTB3aVZxajdpMDFVRnhVCnRKbU1lWURIRzBTQkNuVWpDZ0FGT3ByUURpTXBFR2xYTmZ4LzIvdEVySDIzZDNwSytraFdJbUIza01QL2tRNEIKZzJmYnk2cXJpY1dHd3B4TXBXNWxKZVZXUGlkeWJmMSs0cVhPTWdQbmRnPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=' } }\" $ edgevpn --peerguardian --peergate Enabling/Disabling peergating in runtime Peergating can be disabled in runtime by leveraging the api:\nQuery status $ curl -X GET 'http://localhost:8080/api/peergate' Enable peergating $ curl -X PUT 'http://localhost:8080/api/peergate/enable' Disable peergating $ curl -X PUT 'http://localhost:8080/api/peergate/disable' Starting a new network To init a new Trusted network, start nodes with --peergate-relaxed and add the neccessary auth keys:\n$ edgevpn --peerguardian --peergate --peergate-relaxed $ curl -X PUT 'http://localhost:8080/api/ledger/trustzoneAuth/keytype_1/XXX'  Note It is strongly suggested to use a local store for the blockchain with PeerGuardian. In this way nodes persist locally auth keys and you can avoid starting nodes with `–peergate-relaxed'  ","categories":"","description":"Prevent unauthorized access to the network if tokens are leaked\n","excerpt":"Prevent unauthorized access to the network if tokens are leaked\n","ref":"/edgevpn/docs/concepts/overview/peerguardian/","tags":"","title":"Peerguardian"},{"body":"Contributing to EdgeVPN Contribution guidelines for the EdgeVPN project are on the Github repository. Here you can find some heads up for contributing to the documentation website.\nContributing to the Docs website We Develop with Github We use github to host code, to track issues and feature requests, as well as accept pull requests.\nWe use Hugo to format and generate our website, the Docsy theme for styling and site structure, and Github Actions to manage the deployment of the site. Hugo is an open-source static site generator that provides us with templates, content organisation in a standard directory structure, and a website generation engine. You write the pages in Markdown (or HTML if you want), and Hugo wraps them up into a website.\nAll submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.\nAny contributions you make will be under the Software License of the repository In short, when you submit code changes, your submissions are understood to be under the same License that covers the project. Feel free to contact the maintainers if that’s a concern.\nUpdating a single page If you’ve just spotted something you’d like to change while using the docs, Docsy has a shortcut for you:\n Click Edit this page in the top right hand corner of the page you want to modify. If you don’t already have an up to date fork of the project repo, you are prompted to get one - click Fork this repository and propose changes or Update your Fork to get an up to date version of the project to edit. The appropriate page in your fork is displayed in edit mode.  Quick start with a local checkout Here’s a quick guide to updating the docs with a git local checkout. It assumes you’re familiar with the GitHub workflow and you’re happy to use the automated preview of your doc updates:\n Fork the the repo on GitHub. Make your changes, if are related to docs to see the preview run make serve from the docs dir, then browse to localhost:1313 If you’re not yet ready for a review, add “WIP” to the PR name to indicate it’s a work in progress. Continue updating your doc and pushing your changes until you’re happy with the content. When you’re ready for a review, add a comment to the PR, and remove any “WIP” markers. When you are satisfied send a pull request (PR).  License By contributing, you agree that your contributions will be licensed under the project Licenses.\n","categories":"","description":"See how to contribute to EdgeVPN\n","excerpt":"See how to contribute to EdgeVPN\n","ref":"/edgevpn/docs/contribution-guidelines/","tags":"","title":"Contributing"},{"body":"","categories":"","description":"","excerpt":"","ref":"/edgevpn/index.json","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/edgevpn/community/","tags":"","title":"Community"},{"body":"  #td-cover-block-0 { background-image: url(/edgevpn/featured-background_hu67102be54dc8b3d5d61905ddbc798b68_1673394_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/edgevpn/featured-background_hu67102be54dc8b3d5d61905ddbc798b68_1673394_1920x1080_fill_q75_catmullrom_top.jpg); } }  EdgeVPN Documentation   Download   Create Decentralized private networks\n         EdgeVPN uses go-libp2p to create private decentralized networks.\n      VPN Join nodes via shared secrets\n    Blockchain A Lightweight, small blockchain in your pocket.\n    DHCP and DNS Automatically decentralized coordinated IP assignment and Embedded DNS server to resolve domains from a decentralized domain registry\n        Files Send and receive files between hosts also outside the VPN\n    Services Expose and route TCP services over the p2p network also without the VPN\n    API Simple REST API with an embedded and simple UI with batteries included to operate the network Blockchain.\n      Graphical interface   WebUI  GUI \nKeep an eye on your network with the Web UI. Connect easily from your workstation with the frontend GUI app.           Download       Contributions welcome! If you like to play with code, check out our issues that are marked as “good first issue” and open a Pull Request on GitHub. New users are always welcome, and have fun!\n Read more …\n    Documentation        ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/edgevpn/","tags":"","title":"EdgeVPN"},{"body":"","categories":"","description":"","excerpt":"","ref":"/edgevpn/search/","tags":"","title":"Search Results"}]